{"version":3,"sources":["Components/Common/FormControls/FormControls.module.css","Components/Common/FormControls/FormControls.jsx","Utils/validators/Validators.jsx","Components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.jsx","Components/Dialogs/AddMessageForm/addMessageForm.module.css","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Messages/Messages.jsx","Components/Dialogs/AddMessageForm/AddMessageForm.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","formControl","tag","input","meta","touched","error","props","hasError","className","styles","React","createElement","style","marginTop","borderStyle","borderColor","borderRadius","Textarea","Input","createField","placeholder","name","component","validator","text","loginField","validate","required","value","maxLengthCreator","maxLength","length","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","to","connect","DialogItem","path","id","classes","dialog","src","avatar","alt","activeClassName","active","Message","message","maxLength100","AddMessageReduxForm","reduxForm","form","addMessageForm","onSubmit","handleSubmit","Field","addMessageField","Button","type","Dialogs","dialogsPage","dialogElements","dialogs","map","key","user","messagesElements","messages","dialogItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"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","file":"static/js/5.bbde5eb0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2dyIp\",\"error\":\"FormControls_error__DqHhq\",\"formSummaryError\":\"FormControls_formSummaryError__2QG-t\",\"form\":\"FormControls_form__4bg1U\",\"loginField\":\"FormControls_loginField__B1-rw\"};","import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport {Field} from \"redux-form\";\r\n\r\n//Функция, которая определяет поведение сообщения об ошибке\r\n//и рисует формы\r\n\r\nfunction formControl(tag) {\r\n    return ({input, meta:{touched, error}, ...props}) => {\r\n        const hasError = touched && error\r\n        return (\r\n            <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n                <div >\r\n                    {React.createElement( tag, {...input, ...props, style: {marginTop: \"5px\",borderStyle: \"solid\",borderColor: \"#ff9133\",borderRadius: \"3px\", }} )}\r\n                </div>\r\n                <div>\r\n                    {hasError && <span>{error}</span>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Создание формы с элементами textarea или input\r\n\r\nexport const Textarea = formControl( 'textarea' )\r\n\r\nexport const Input = formControl( 'input' )\r\n\r\n//Функция для создания формы\r\n\r\nexport const createField = (placeholder, name, component, validator, props={}, text=\"\") => {\r\n    return <div className={styles.loginField}>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validator}\r\n               {...props}/>\r\n               <span>{text}</span>\r\n    </div>\r\n}","\r\n//Если поле будет пустым, вернет запись об ошибке\r\n\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is requred\";\r\n}\r\n\r\n//При превышении количества символов в сообщении, вернет сообщение об ошибке\r\n\r\nexport const maxLengthCreator = (maxLength) => value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3vDbR\",\"dialogItems\":\"Dialogs_dialogItems__ru-XR\",\"active\":\"Dialogs_active__1utVt\",\"messages\":\"Dialogs_messages__XWB5m\",\"dialog\":\"Dialogs_dialog__3sjMa\",\"message\":\"Dialogs_message__hc1dH\"};","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\n//Получаем из стейта данные о том, залогинен ли пользователь\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\n//Хок, который принимает в себя компонент и отображает его, только\r\n//если пользователь залогинен, иначе отправляет на страничку логина\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'}/>;\r\n            return <Component {...this.props}/>;\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addMessageForm\":\"addMessageForm_addMessageForm__2ju1r\",\"addMessageField\":\"addMessageForm_addMessageField__1VKm3\"};","import React from \"react\";\r\nimport classes from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n//Компонент для отрисовки списка юзеров в диалогах\r\n//НавЛинк для красоты, чтобы подчеркивать юзеров\r\n// \"как живых\"\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return (\r\n        <div className={classes.dialog}>\r\n            <img src={props.avatar} alt=\"user_avatar\"/>\r\n            <NavLink to={path} activeClassName={classes.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\nexport default DialogItem;","import React from \"react\";\r\nimport classes from './../Dialogs.module.css';\r\n\r\n//Компонент для отрисовки каждого сообщения\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\nexport default Message;","import {Field, reduxForm} from \"redux-form\";\r\nimport React from \"react\";\r\nimport {Textarea} from \"../../Common/FormControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/validators/Validators\";\r\nimport styles from \"./addMessageForm.module.css\"\r\nimport Button from \"../../Common/Button/Button\";\r\n\r\n//Определяем максимальную длину сообщения в 100 для валидатора\r\n\r\nconst maxLength100 = maxLengthCreator( 100 );\r\n\r\n//Рисуем форму с одной Textarea и кнопкой\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form className={styles.addMessageForm} onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field className={styles.addMessageField} component={Textarea} name=\"newMessageBody\" placeholder=\"Напишите сообщение...\" validate={[required, maxLength100]}/>\r\n            </div>\r\n            <div>\r\n                <Button type='send'/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n//Оборачиваем форму в Редакс Форм\r\n\r\n\r\nconst AddMessageReduxForm = reduxForm( {form: 'dialogAddMessageForm'} )( AddMessageForm )\r\n\r\nexport default AddMessageReduxForm","import React from \"react\";\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Messages/Messages\";\r\nimport AddMessageReduxForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    //Переименовываем полученные из стейта данные\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    //Маппим массив dialogs и передаем ключ, id, имя и аватар\r\n    //компоненту DialogItem по отдельности\r\n\r\n    let dialogElements = state.dialogs.map(\r\n        dialog => <DialogItem key={dialog.id}\r\n                              name={dialog.user}\r\n                              id={dialog.id}\r\n                              avatar={dialog.avatar}/>\r\n    );\r\n\r\n    //Маппим массив сообщений, передаем каждому сообщению ключ\r\n    //и текст для отображения в компоненте Message\r\n\r\n    let messagesElements = state.messages.map(\r\n        message => <Message key={message.id}\r\n                            message={message.message}/>\r\n    );\r\n\r\n    //Коллбек, который мы передаем в onSubmit формы, чтобы\r\n    //он запустил action creator из пропсов, передав ему\r\n    //текст из формы\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    //отрисовка юзеров, сообщений и формы для новых сообщений\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n            </div>\r\n            <AddMessageReduxForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n//Забираем стейт dialogsPage из dialogs-reducer\r\nlet mapStateToProps = (state) => {\r\n\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n\r\n    }\r\n}\r\n\r\n//Забираем из редьюсера action creator, который принимает\r\n//новый текст и добавляет его в стейт\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch( sendMessageCreator(newMessageBody) );\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// Compose коннекта с самописным хоком withAuthRedirect, и передача стейта и sendMessage\r\n//в пропсы Dialogs\r\n\r\nexport default compose( connect( mapStateToProps, mapDispatchToProps ), withAuthRedirect )( Dialogs )\r\n;"],"sourceRoot":""}