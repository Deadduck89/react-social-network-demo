{"version":3,"sources":["Components/Common/FormControls/FormControls.jsx","Utils/validators/Validators.jsx","Components/Login/Login.module.css","Components/Login/Login.jsx"],"names":["formControl","tag","input","meta","touched","error","props","hasError","className","styles","React","createElement","style","marginTop","borderStyle","borderColor","borderRadius","Textarea","Input","createField","placeholder","name","component","validator","text","loginField","validate","required","value","maxLengthCreator","maxLength","length","module","exports","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","classes","loginForm","onSubmit","type","src","captcha","alt","formSummaryError","loginButton","connect","state","isAuth","auth","login","to","formData","email","password","rememberMe"],"mappings":"sTAOA,SAASA,EAAYC,GACjB,OAAO,YAA+C,IAA7CC,EAA4C,EAA5CA,MAA4C,IAArCC,KAAMC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAWC,EAAW,iBAC3CC,EAAWH,GAAWC,EAC5B,OACI,yBAAKG,UAAWC,IAAOT,YAAc,KAAOO,EAAWE,IAAOJ,MAAQ,KAClE,6BACKK,IAAMC,cAAeV,EAArB,uCAA8BC,GAAUI,GAAxC,IAA+CM,MAAO,CAACC,UAAW,MAAMC,YAAa,QAAQC,YAAa,UAAUC,aAAc,WAEvI,6BACKT,GAAY,8BAAOF,MASjC,IAAMY,EAAWjB,EAAa,YAExBkB,EAAQlB,EAAa,SAIrBmB,EAAc,SAACC,EAAaC,EAAMC,EAAWC,GAAkC,IAAvBjB,EAAsB,uDAAhB,GAAIkB,EAAY,uDAAP,GAChF,OAAO,yBAAKhB,UAAWC,IAAOgB,YAC1B,kBAAC,IAAD,eAAOL,YAAaA,EACbC,KAAMA,EACNC,UAAWA,EACXI,SAAUH,GACNjB,IACJ,8BAAOkB,M,iCCrCtB,oEAEO,IAAMG,EAAW,SAAAC,GACpB,IAAIA,EAEJ,MAAO,oBAKEC,EAAmB,SAACC,GAAD,OAAe,SAAAF,GAC3C,GAAIA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCXlCE,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,UAAY,yBAAyB,YAAc,2BAA2B,QAAU,yB,iCCDvI,wHAkCMC,EAAiBC,YAAU,CAACC,KAAK,SAAhBD,EApBL,SAAC,GAAuC,IAAtCE,EAAqC,EAArCA,aAAchC,EAAuB,EAAvBA,MAAOiC,EAAgB,EAAhBA,WACrC,OACI,0BAAM9B,UAAW+B,IAAQC,UAAWC,SAAUJ,GACrClB,YAAY,QAAS,QAASD,IAAO,CAACS,MACtCR,YAAY,WAAY,WAAYD,IAAO,CAACS,KAAW,CAACe,KAAK,aAC7DvB,YAAY,KAAM,aAAcD,IAAO,KAAM,CAACwB,KAAK,YAAa,mFACpEJ,GAAc,yBAAKK,IAAKL,EAAY9B,UAAW+B,IAAQK,QAASC,IAAI,YACpEP,GAAcnB,YAAY,qBAAsB,UAAWD,IAAO,CAACS,MACnEtB,GAAS,yBAAKG,UAAWC,IAAOqC,kBAC5BzC,GAEL,yBAAKG,UAAW+B,IAAQQ,aACrB,kBAAC,IAAD,CAAQL,KAAK,eAoCbM,uBALS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OACnBZ,WAAYW,EAAME,KAAKb,cAGa,CAACc,WAA1BJ,EAzBD,SAAC1C,GAQX,OAAIA,EAAM4C,OACC,kBAAC,IAAD,CAAUG,GAAI,aAIzB,yBAAK7C,UAAW+B,IAAQa,OACpB,oGACA,kBAAClB,EAAD,CAAgBO,SAZF,SAAAa,GACdhD,EAAM8C,MAAME,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASV,UAWzCN,WAAYhC,EAAMgC","file":"static/js/6.d184e8d3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./FormControls.module.css\";\r\nimport {Field} from \"redux-form\";\r\n\r\n//Функция, которая определяет поведение сообщения об ошибке\r\n//и рисует формы\r\n\r\nfunction formControl(tag) {\r\n    return ({input, meta:{touched, error}, ...props}) => {\r\n        const hasError = touched && error\r\n        return (\r\n            <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n                <div >\r\n                    {React.createElement( tag, {...input, ...props, style: {marginTop: \"5px\",borderStyle: \"solid\",borderColor: \"#ff9133\",borderRadius: \"3px\", }} )}\r\n                </div>\r\n                <div>\r\n                    {hasError && <span>{error}</span>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//Создание формы с элементами textarea или input\r\n\r\nexport const Textarea = formControl( 'textarea' )\r\n\r\nexport const Input = formControl( 'input' )\r\n\r\n//Функция для создания формы\r\n\r\nexport const createField = (placeholder, name, component, validator, props={}, text=\"\") => {\r\n    return <div className={styles.loginField}>\r\n        <Field placeholder={placeholder}\r\n               name={name}\r\n               component={component}\r\n               validate={validator}\r\n               {...props}/>\r\n               <span>{text}</span>\r\n    </div>\r\n}","\r\n//Если поле будет пустым, вернет запись об ошибке\r\n\r\nexport const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is requred\";\r\n}\r\n\r\n//При превышении количества символов в сообщении, вернет сообщение об ошибке\r\n\r\nexport const maxLengthCreator = (maxLength) => value => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__1zeTA\",\"loginForm\":\"Login_loginForm__IZKsy\",\"loginButton\":\"Login_loginButton__2sP8a\",\"captcha\":\"Login_captcha__16C6P\"};","import React from \"react\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {createField, Input} from \"../Common/FormControls/FormControls\";\r\nimport {required} from \"../../Utils/validators/Validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport styles from \"../Common/FormControls/FormControls.module.css\"\r\nimport classes from \"./Login.module.css\"\r\nimport Button from \"../Common/Button/Button\";\r\n\r\n//Форма логина, содержащая email, пароль и чекбокс для запоминания юзера\r\n//Если форма получает урл капчи, то появляется картинка и поле капчи\r\n\r\nconst LoginForm = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form className={classes.loginForm} onSubmit={handleSubmit}>\r\n                {createField(\"Email\", \"email\", Input, [required])}\r\n                {createField(\"Password\", \"password\", Input, [required], {type:\"password\"})}\r\n                {createField(null, \"rememberMe\", Input, null, {type:\"checkbox\"}, \"Запомнить меня\")}\r\n            {captchaUrl && <img src={captchaUrl} className={classes.captcha} alt=\"captcha\"/>}\r\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", Input, [required])}\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div className={classes.loginButton}>\r\n               <Button type='login' />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n//Обертка формы в Редакс Форм\r\n\r\nconst LoginReduxForm = reduxForm({form:'login'})(LoginForm)\r\n\r\n\r\nconst Login = (props) => {\r\n    //onSubmit запускает санку login из auth-reducer, которая отправляет\r\n    //email, пароль и \"Запомнить меня\" на сервер\r\n    const onSubmit = (formData=>{\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    })\r\n    //Проверка, залогинен ли пользователь, и редирект на профиль,\r\n    //если залогинен\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n    //Отрисовка заголовка и формы\r\n    return (\r\n    <div className={classes.login}>\r\n        <h3>Войти на сайт</h3>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\r\n    </div>\r\n    )\r\n}\r\n//Из стейта забираем состояние логина пользователя\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captchaUrl: state.auth.captchaUrl\r\n})\r\n//В пропсы компоненте Login отдаем стейт и санку login\r\nexport default connect(mapStateToProps, {login})(Login);"],"sourceRoot":""}